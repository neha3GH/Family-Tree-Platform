// server.js

const express = require("express");
const neo4j = require("neo4j-driver");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors()); // Allow frontend to communicate with backend

// Connect to Neo4j
const driver = neo4j.driver(
    "bolt://localhost:7687",
    neo4j.auth.basic("neo4j", "password") // Replace with your Neo4j password
);
const session = driver.session();

// API Endpoint to receive family form data and store it in Neo4j
app.post("/api/family", async (req, res) => {
    const { name, father, mother, spouse, children } = req.body;

    try {
        // Create Person node
        await session.run(
            `MERGE (p:Person {name: $name})`,
            { name }
        );

        // Create Father relationship
        if (father) {
            await session.run(
                `MERGE (f:Person {name: $father})
                 MERGE (p:Person {name: $name})
                 MERGE (p)-[:CHILD_OF]->(f)`,
                { name, father }
            );
        }

        // Create Mother relationship
        if (mother) {
            await session.run(
                `MERGE (m:Person {name: $mother})
                 MERGE (p:Person {name: $name})
                 MERGE (p)-[:CHILD_OF]->(m)`,
                { name, mother }
            );
        }

        // Create Spouse relationship
        if (spouse) {
            await session.run(
                `MERGE (s:Person {name: $spouse})
                 MERGE (p:Person {name: $name})
                 MERGE (p)-[:MARRIED_TO]->(s)
                 MERGE (s)-[:MARRIED_TO]->(p)`, // Bidirectional relationship
                { name, spouse }
            );
        }

        // Create Children relationships
        if (children && children.length > 0) {
            for (const child of children) {
                await session.run(
                    `MERGE (c:Person {name: $child})
                     MERGE (p:Person {name: $name})
                     MERGE (c)-[:CHILD_OF]->(p)`,
                    { name, child }
                );
            }
        }

        res.json({ message: "Family data added successfully to Neo4j!" });
    } catch (error) {
        console.error("Error:", error);
        res.status(500).json({ error: error.message });
    }
});

// Start server
app.listen(8080, () => console.log("Server running on port 8080"));
