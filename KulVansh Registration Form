<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="icon" href="data:;base64,=" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Family Tree Registration with Subscription</title>
    <style>
      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background-image: url("https://cdn.glitch.global/3721867a-9cc4-4021-82fe-49f6d43bf585/tree.jpg?v=1728480900306");
        background-size: fill;
        background-position: center;
        background-repeat: no-repeat;
      }
      .container {
        width: 50%;
        margin: 50px auto;
        background-color: rgba(255, 255, 255, 0.9);
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        text-align: center;
      }
      h2 {
        color: #4caf50;
        font-size: 28px;
        margin-bottom: 20px;
      }
      form {
        display: flex;
        flex-direction: column;
        gap: 20px;
        text-align: left;
      }
      label {
        font-weight: bold;
        color: #333;
      }
      input[type="text"],
      input[type="email"],
      input[type="tel"],
      input[type="password"],
      input[type="number"] {
        width: 100%;
        padding: 10px;
        margin-top: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
      }
      input[type="submit"],
      button {
        background-color: #4caf50;
        color: white;
        padding: 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      }
      input[type="submit"]:hover,
      button:hover {
        background-color: #45a049;
      }
      .subscription-section {
        margin: 30px 0;
      }
      .subscription-section h3 {
        color: #333;
        font-size: 24px;
        margin-bottom: 15px;
      }
      .pricing-table {
        display: flex;
        justify-content: space-around;
        text-align: center;
      }
      .pricing-plan {
        padding: 20px;
        border-radius: 10px;
        width: 25%;
        position: relative;
        color: #333;
      }
      .pricing-plan h4 {
        margin: 10px 0;
        font-size: 22px;
        color: #333;
      }
      .pricing-plan .price {
        font-size: 22px;
        font-weight: bold;
        color: #4caf50;
        margin: 10px 0;
      }
      .pricing-plan .details {
        margin: 10px 0;
        font-size: 16px;
      }
      .pricing-plan button {
        background-color: #4caf50;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
      }
      .pricing-plan button:hover {
        background-color: #45a049;
      }

      /* Individual Plan Background Colors */
      .pricing-plan.trial {
        background-color: #f0f8ff; /* Light Blue */
      }
      .pricing-plan.basic {
        background-color: #fbe9e7; /* Light Red/Coral */
      }
      .pricing-plan.standard {
        background-color: #e0f7fa; /* Light Blue with Highlight */
        border: 2px solid #4caf50;
      }
      .pricing-plan.premium {
        background-color: #fbe9e7; /* Light Red/Coral */
      }

      /* Ribbon Style for Best Selling Tag */
      .best-selling-tag {
        position: absolute;
        top: +4px;
        right: -45px;
        background-color: red;
        color: white;
        padding: 8px 24px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
        border-radius: 0;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transform: rotate(45deg); /* Rotate the ribbon */
        z-index: 1;
      }
      /* Create the triangular edges for the ribbon */
      .best-selling-tag:before,
      .best-selling-tag:after {
        content: "";
        position: absolute;
        width: 0;
        height: 0;
        border-style: solid;
      }
      /* Left triangle */
      .best-selling-tag:before {
        top: 100%;
        left: 0;
        border-width: 0 10px 10px 0;
        border-color: transparent #ff9800 transparent transparent;
      }
      /* Right triangle */
      .best-selling-tag:after {
        top: 100%;
        right: 0;
        border-width: 0 0 10px 10px;
        border-color: transparent transparent transparent #ff9800;
      }
      /* Highlight selected plan */
      .selected-plan {
        border: 4px solid #4caf50 !important;
        background-color: #dff0d8;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h2>Family Tree Website Registration</h2>

      <!-- Registration Form -->
      <form id="registrationForm">
        <!-- Name -->
        <label for="name">Full Name:</label>
        <input
          type="text"
          id="name"
          name="name"
          required
          placeholder="Enter your full name"
        />

        <!-- Email -->
        <label for="email">Email:</label>
        <input
          type="email"
          id="email"
          name="email"
          required
          placeholder="Enter your email"
        />

        <!-- Contact Number -->
        <label for="phone">Contact Number:</label>
        <input
          type="tel"
          id="phone"
          name="phone"
          required
          pattern="[0-9]{10}"
          placeholder="Enter 10-digit phone number"
        />

        <!-- Create Password -->
        <label for="password">Create Password:</label>
        <input
          type="password"
          id="password"
          name="password"
          required
          placeholder="Create a strong password"
        />

        <!-- Confirm Password -->
        <label for="confirmPassword">Confirm Password:</label>
        <input
          type="password"
          id="confirmPassword"
          name="confirmPassword"
          required
          placeholder="Re-enter your password"
        />

        <!-- Save Password -->
        <label>
          <input type="checkbox" id="savePassword" /> Save Password for future
          logins
        </label>

        <!-- User ID (Auto-generated) -->
        <label for="userId">User ID (Auto-generated):</label>
        <input
          type="text"
          id="userId"
          name="userId"
          readonly
          value="User1234"
          placeholder="User1234"
        />

        <!-- Authentication Code Section -->
        <div id="authCodeSection" class="auth-code-section">
          <label for="authCode">Your Authentication Code:</label>
          <input
            type="text"
            id="authCode"
            name="authCode"
            readonly
            placeholder="Your unique code will appear here"
          />
          <p style="font-weight: bold; color: red;">
            Please save this code securely. You will need it to reset your password in the future.
          </p>
        </div>

        <!-- Button to Generate Authentication Code -->
        <button type="button" onclick="generateAuthCode()">
          Generate Authentication Code
        </button>

<div id="responseMessage"></div>

<script>
  document.getElementById('userForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const formData = new FormData(this); // Collect all form data including the file

    try {
      const response = await fetch('http://localhost:8080/api/users', {
        method: 'POST',
        body: formData, // Send form data directly (multipart/form-data)
      });

      if (response.ok) {
        const result = await response.json();
        document.getElementById('responseMessage').innerText = 'User added successfully!';
        console.log(result);
      } else {
        document.getElementById('responseMessage').innerText = 'Error adding user.';
      }
    } catch (error) {
      console.error('Error:', error);
      document.getElementById('responseMessage').innerText = 'Error adding user.';
    }
  });
</script>

      <!-- Subscription Plans -->
      <div class="subscription-section">
        <h3>Suggested Subscription Plan</h3> <br>
        <div class="pricing-table">
          <div class="pricing-plan trial">
            <h4>Trial</h4>
            <p class="price">Rs. 1</p>
            <p class="details">Add up to 9 members</p>
            <p class="details">Valid for 6 months</p>
            
          </div>
          <div class="pricing-plan basic">
            <h4>Basic</h4>
            <p class="price"><strong>Rs. 21/-</strong></p>
            <p class="price"><strong>Per Year</strong></p>
            <p class="price"> (Only Rs. 1.75 per month!)</p>
            <p class="details">Add up to 20 members</p>
            
          </div>
          <div class="pricing-plan standard">
            <!-- BEST SELLING Ribbon Tag -->
            <span class="best-selling-tag">BEST SELLING</span>
            <h4>Standard</h4>
            <p class="price"><strong>Rs. 101/-</strong></p>
            <p class="price"><strong>Per Year</strong></p>
            <p class="price"> (Only Rs. 8.42 per month!)</p>
            <p class="details">Add up to 100 members</p>
            
          </div>
          <div class="pricing-plan premium">
            <h4>Premium</h4>
            <p class="price"><strong>Rs. 501/-</strong></p>
            <p class="price"><strong>Per Year</strong></p>
            <p class="price"> (Only Rs. 41.75 per month!)</p>
            <p class="details">Add up to 500 members</p>
            
          </div>
        </div>
      </div>
    <!-- QR Code Section (Initially Hidden) -->
    <div id="qrSection" class="qr-section">
      <h3>Scan the QR Code to Complete Payment:</h3>
      <img
        src="https://cdn.glitch.global/3721867a-9cc4-4021-82fe-49f6d43bf585/Screenshot%202024-10-29%20181619.png?v=1730206043120"
        alt="QR Code"
      />
    </div>
<!--  
      <h2>Payment Verification</h2>
    <form id="paymentForm" onsubmit="return validateForm()">
        <label for="screenshot">Upload Screenshot:</label>
        <input type="file" id="screenshot" name="screenshot" accept="image/*" required>
        <br><br>
     -->
        <h2>Payment Verification</h2>
        <h3>
       Thank you for your payment. Please email a screenshot of your payment to our official email ID:</h3>
        <a href= "vrishabhsoft@gmail.com">vrishabhsoft@gmail.com</a>
        <h3>We will verify your payment and get back to you shortly.
          If you have any questions or need assistance, feel free to reach out.
        </h3>
        
        <button type="submit">Submit Application</button>
    
<script>
  
  // Function to generate a random authentication code
  function generateAuthCode() {
    const authCode = Math.random().toString(36).substring(2, 10); // Generates a random 8-character code
    document.getElementById("authCode").value = authCode;
    document.getElementById("authCodeSection").style.display = "block"; // Ensure this section is visible
  }

  document.addEventListener('DOMContentLoaded', function () {
    // Form submission handler
    document.getElementById("registrationForm").addEventListener("submit", function (event) {
      event.preventDefault();  // Prevents page reload

      // Collect data from form fields
      const formData = {
        name: document.getElementById("name").value,
        email: document.getElementById("email").value,
        phone: document.getElementById("phone").value,
        password: document.getElementById("password").value,
        userId: document.getElementById("userId").value,
        authCode: document.getElementById("authCode").value
      };

      // Validate form data before sending
      if (formData.password !== document.getElementById("confirmPassword").value) {
        alert("Passwords do not match. Please try again.");
        return;
      }

      // Send data to the backend
      fetch("http://localhost:8080/api/users", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(formData)  // Convert the formData to JSON format
      })
        .then(response => {
          if (response.ok) {
            alert("Form submission successful!");
            return response.json();
          } else {
            throw new Error("Failed to save data.");
          }
        })
        .then(data => console.log("Data saved:", data))
        .catch(error => console.error("Error:", error));
    });
  });
  
  document.getElementById("registrationForm").addEventListener("submit", async function (e) {
  e.preventDefault();

  const formData = new FormData(this);
  try {
    const response = await fetch("http://localhost:8080/api/users", {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      document.getElementById("responseMessage").innerText = "Submission successful!";
      document.getElementById("qrSection").style.display = "block";
    } else {
      document.getElementById("responseMessage").innerText = "Error adding user.";
    }
  } catch (error) {
    console.error("Error:", error);
    document.getElementById("responseMessage").innerText = "Error adding user.";
  }
});
</script>
  </body>
</html>

__________________________________________________________________________________________

script.js :

const btn = document.querySelector("button"); // Get the button from the page
if (btn) { // Detect clicks on the button
  btn.onclick = function () {
    // The 'dipped' class in style.css changes the appearance on click
    btn.classList.toggle("dipped");
  };
}

// ----- GLITCH STARTER PROJECT HELPER CODE -----

// Open file when the link in the preview is clicked
let goto = (file, line) => {
  window.parent.postMessage(
    { type: "glitch/go-to-line", payload: { filePath: file, line: line } }, "*"
  );
};
// Get the file opening button from its class name
const filer = document.querySelectorAll(".fileopener");
filer.forEach((f) => {
  f.onclick = () => { goto(f.dataset.file, f.dataset.line); };
});

// Backend URL
const backendURL = 'http://localhost:8080'; // Correcting the backend URL

async function createUser(name, email) {
    try {
        const response = await fetch(`${backendURL}/api/users`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name, email })
        });
        const data = await response.json();
        console.log('User created:', data);
    } catch (error) {
        console.error('Error:', error);
    }
}

fetch(`${backendURL}/api/users`)
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

document.getElementById('userForm').addEventListener('submit', async function (e) {
  e.preventDefault(); // Prevents the default page reload

  const name = document.getElementById('name').value;
  const email = document.getElementById('email').value;
  const phoneNumber = document.getElementById('phone').value;  // Make sure phone field is included
  const paymentScreenshot = document.getElementById('paymentScreenshot').files[0];  // Make sure this field exists in the form

  const formData = {
    name,
    email,
    phoneNumber,  // Include phoneNumber
    paymentScreenshot: paymentScreenshot ? paymentScreenshot.name : null // Assuming you are uploading the file
  };

  try {
    const response = await fetch(`${backendURL}/api/users`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData), // Include the complete data
    });

    if (response.ok) {
      const result = await response.json();
      document.getElementById('responseMessage').innerText = 'User added successfully!';
      console.log(result);
    } else {
      document.getElementById('responseMessage').innerText = 'Error adding user.';
    }
  } catch (error) {
    console.error('Error:', error);
    document.getElementById('responseMessage').innerText = 'Error adding user.';
  }
});

document.addEventListener('DOMContentLoaded', function () {
  const btn = document.querySelector("button"); // Get the button from the page
  if (btn) { // Detect clicks on the button
    btn.onclick = function () {
      // The 'dipped' class in style.css changes the appearance on click
      btn.classList.toggle("dipped");
    };
  }

  // Form submission handler
  document.getElementById("registrationForm").addEventListener("submit", function(event) {
    event.preventDefault();  // Prevents page reload

    // Collect data from form fields
    const formData = {
      name: document.getElementById("name").value,
      email: document.getElementById("email").value,
      phone: document.getElementById("phone").value,
      password: document.getElementById("password").value,
      userId: document.getElementById("userId").value,
      authCode: document.getElementById("authCode").value
    };

    // Validate form data before sending
    if (formData.password !== document.getElementById("confirmPassword").value) {
      alert("Passwords do not match. Please try again.");
      return;
    }

    // Send data to the backend
    fetch("http://localhost:8080/api/users", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(formData)  // Convert the formData to JSON format
    })
    .then(response => response.json())
    .then(data => {
      console.log("User created:", data);
      alert("Registration successful!");
    })
    .catch(error => console.error("Error:", error));
  });

  // Function to generate a random authentication code
  function generateAuthCode() {
    const authCode = Math.random().toString(36).substring(2, 10); // Generates a random 8-character code
    document.getElementById("authCode").value = authCode;
    document.getElementById("authCodeDisplay").innerText = authCode;
    document.getElementById("authCodeSection").style.display = "block";
  }
});
